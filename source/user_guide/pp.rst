报文处理
=========

ODP应用程序旨在处理数据包。
为了帮助处理数据包，使得应用程序能够操作数据包数据及其元数据。
数据包通过各自实现的抽象数据类型 ``odp_packet_t`` 来引用。

当报文到达源 ``odp_pktio_t`` 并且被应用程序直接或间接（通过调度队列）接收时，报文对象被创建。
当他们通过相关联的的传输队列传输到 ``odp_pktio_t`` 时，他们可能被隐式释放，或者通过调用 ``odp_packet_free()`` 来释放。

有时，应用程序可能直接发起一个数据包，或者通过从现有数据包导出新的数据包，ODP提供了对应的API以实现这些处理。
应用程序创建的数据包可以通过回环口重新送回并进行分类，或者应用程序可以根据需要进行自己的解析。

与数据包相关联的各种属性（如解析结果）存储在元数据中，ODP提供了对应的API以允许应用程序操作并修改这些信息。


数据包结构和概念
-----------------

报文是由符合诸如以太网架构格式的八位字节序组成，可以通过 ODP PKTIO抽象接口进行接收和发送。
数据包长度是指数据包的字节数。
ODP中数据包的数据是通过偏移来引用的，因为他们反映了数据包的逻辑内容和结构，而与特定的ODP实现和如何存储数据无关。

这些概念如下图所示：

.. _odp-packet-structure:

.. figure:: img/odp-packet-structure.*

   ODP Packet Structure

报文数据包括0个或多个报头，0个或多个字节的payload，再接0个或多个报尾。
这里显示的是允许应用程序检查和检索数据包的各个部分并操作其结构的各种API。

为了支持数据包操作，预定义了headroom和tailroom与数据包相关联。
可以通过操作这些区域来调整数据包。
典型的数据包处理包括通过数据包接收时调用 ``odp_pull_head()`` 从数据包中剥离报头，数据包发送时调用 ``odp_push_head()`` 插入新的报头。
注意，因为headroom和tailroom表示保留的区域，因此这些区域在通过相关的push操作成为报文的一部分之前，不能被ODP应用程序寻址或直接使用。
类似的，通过pull操作删除的字节就不能被访问了。


报文段和寻址
--------------

ODP平台使用一系列方法和技术来有效存储和处理数据包。
这些技术各个平台各不相同，因此为了保证可移植性，ODP提供一些数据包引用的约定。

ODP API通过抽象数据结构 ``odp_packet_t`` 来引用数据包对象。
描述数据包的系统元数据的各种位与数据包相关联。
通过参考元数据，ODP应用程序通过最小化检查报文数据的需求来加速报文处理。
这是因为，通过解析和分类功能来填充元数据，该功能与通过ODP调度程序呈现给应用程序之前发生的入口处理相耦合。
